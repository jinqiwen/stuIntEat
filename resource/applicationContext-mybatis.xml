<?xml version="1.0" encoding="UTF-8"?>  
    <beans xmlns="http://www.springframework.org/schema/beans"  
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
            xmlns:aop="http://www.springframework.org/schema/aop"  
            xmlns:p="http://www.springframework.org/schema/p"  
            xmlns:tx="http://www.springframework.org/schema/tx"  
            xmlns:context="http://www.springframework.org/schema/context"  
            xsi:schemaLocation="   
                http://www.springframework.org/schema/beans
                http://www.springframework.org/schema/beans/spring-beans.xsd   
                http://www.springframework.org/schema/aop 
                http://www.springframework.org/schema/aop/spring-aop.xsd  
                http://www.springframework.org/schema/tx 
                http://www.springframework.org/schema/tx/spring-tx.xsd
                http://www.springframework.org/schema/context
       		    http://www.springframework.org/schema/context/spring-context.xsd">  
        
           
           
           
        <context:component-scan base-package="org.stuIntelEat.dao"/>
        <context:component-scan base-package="org.stuIntelEat.service"/> 
       
        <!-- Properties文件读取配置，base的properties -->  
        <context:property-placeholder location="classpath:jdbc.properties"/>  
           
        <!-- JNDI获取数据源(使用dbcp连接池) -->  
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
	    <property name="driverClassName" value="${driverClassName}"/>
	    <property name="url" value="${url}"/>
	    <property name="username" value="${uname}"/>
	    <property name="password" value="${password}"/>
	    <property name="minIdle" value="${minIdle}"/>
	    <property name="maxIdle" value="${maxIdle}"/>
	    <property name="initialSize" value="${initialSize}"/>
	    <property name="maxActive" value="${maxActive}"/>
	    <property name="maxWait" value="${maxWait}"/>
	    <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
	    <property name="removeAbandoned" value="${removeAbandoned}"/>
	    <!-- sql 心跳：保证连接池是真实有效的连接-->
	    <!-- 开启Evict的定时效验，循环效验 -->
	    <property name="testWhileIdle" value="true"></property>
	    <!--定义Evict的时间间隔，单位毫秒，大于0才会开启evict  -->
	   
	    <property name="timeBetweenEvictionRunsMillis" value="60000"></property>
	    <!-- 在进行borrowObject处理时，会对拿到的连接进行效验-false表示 不效验 -->
	    <property name="testOnBorrow" value="false"></property>
	    <!-- 在进行returnObject处理时，会对返回的连接进行效验-false 表示不效验-->
	    <property name="testOnReturn" value="false"></property>
	    <!-- 效验使用的sql语句，validationQuery,复杂的效验sql会影响性能 -->
	    <property name="validationQuery" value="select 1"></property>
	    <!-- 配置每次的效验连接的数量，一般等于maxActive -->
	    <property name="numTestsPerEvictionRun" value="${maxActive}"></property>
	 	</bean> 
	 	<!-- redis配置 -->
	 	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	 	<property name="maxActive" value="-1"></property>
	 	<!-- 最大空闲数 -->
	 	<property name="maxIdle" value="5"></property>
	 	<!-- 最大等待时间 -->
	 	<property name="maxWait" value="1000"></property>
	 	<!-- jedis实例是否在使用前验证 -->
	    <property name="testOnBorrow" value="true"></property>
	 	</bean>
	 	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" destroy-method="destroy">
	 	 <constructor-arg ref="jedisPoolConfig"></constructor-arg>
	 	 <!-- 服务器ip地址 -->
	 	 <constructor-arg value="127.0.0.1"></constructor-arg>
	 	 <!-- 默认端口号 -->
	 	 <constructor-arg value="6379"></constructor-arg>
	 	</bean>
	 	<bean id="redisAPI" class="org.stuIntelEat.tool.RedisAPI">
	 	<property name="jedisPool" ref="jedisPool"></property>
	 	</bean>
 		<!-- define the SqlSessionFactory, notice that configLocation is not needed when you use MapperFactoryBean -->  
        <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">  
            <property name="dataSource" ref="dataSource" />  
            <property name="configLocation" value="classpath:mybatis-config.xml" />  
        </bean> 
<!-- 
		Mapper接口所在包名，Spring会自动查找其下的Mapper
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
            <property name="basePackage" value="cn.appsys.dao" />  
           
        </bean>
       -->
      
     


        <!-- enable transaction demarcation with annotations -->  
        <!-- <tx:annotation-driven />  -->
           
        <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
            <property name="dataSource" ref="dataSource" />  
        </bean>
         <tx:advice id="myAdvice" transaction-manager="transactionManager">
           <tx:attributes>
           <tx:method name="hl*" propagation="REQUIRED" rollback-for="Exception"/>
         <!--   <tx:method name="*"/> -->
           </tx:attributes>
         </tx:advice>
       <aop:aspectj-autoproxy />
       <aop:config proxy-target-class="true">
         <aop:pointcut expression="execution(* *org.stuIntelEat.service..*(..))" id="transService"/>
         <aop:advisor advice-ref="myAdvice" pointcut-ref="transService"></aop:advisor>
       </aop:config>
		<!-- scan for mappers and let them be autowired 
		MapperScannerConfigurer Mybatis-Spring 会自动为我们注册Mapper对应的MapperFactoryBean对象-->  
		<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
            <property name="basePackage" value="org.stuIntelEat.dao" />  
        </bean>   
    </beans>  
